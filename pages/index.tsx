import Head from 'next/head'
import styles from '../styles/Home.module.css'
import gbs from '../styles/Teste.module.css'
import global from '../styles/Teste.module.css'

import type { NextPage } from 'next'
import Image from 'next/image'
import React from 'react'
import { FormEvent, useState } from 'react'
import { IHeroiOB } from '../types/iHeroiOB'
import { IHeroi } from '../types/iHeroi'
import { consultaApiHerois } from '../services/consultarApiHerois'
import { updateSimulator } from '../services/updateHeroi'
import totalSacado from '../services/totalSacado'
import { quantidadeRaridade, calcularBcoin, classificacaoBomber } from '../services/calcularBcoin'
import bHouse from '../services/bhouse'

const Bomb = () => {

    const [carteira, setCarteira] = useState('')
    const [heroi, setHeroi] = useState([])
    const [max, setMax] = useState(0)
    const [avg, setAvg] = useState(0)
    const [min, setMin] = useState(0)

    const [claimed, setClaimed] = useState(0)
    const [taxa, setTaxa] = useState(0)
    const [saques, setSaques] = useState(0)
    const [totalBcoinGasto, setTotalBcoinGasto] = useState(0)
    const [quantidadePorRaridade, setQuantidadePorRaridade] = useState({
        common: 0,
        rare: 0,
        superRare: 0,
        epic: 0,
        legend: 0,
        superLegend: 0
    })

    const [house, setHouse] = useState({
        tokenID: '',
        tokenName: '',
        value: ''
    })

    const [mostrar, setMostrar] = useState(false)

    // const onSubmit = (e: FormEvent) => {
    //     e.preventDefault();
    // }

    const buscarHero = async () => {
        console.log("Vamos ver os herois :D")

        setMostrar(true)

        const heroio: any = await calcular(carteira)
        var objCasa: any

        if (heroio) {
            setMostrar(true)
            objCasa = await bHouse(carteira)
        } else {
            setMostrar(false)
        }

        setHeroi(heroio?.final)
        setMax(heroio?.max)
        setAvg(heroio?.avg)
        setMin(heroio?.min)

        setClaimed(heroio?.claimed)
        setTaxa(heroio?.taxa)
        setSaques(heroio?.saques)
        setTotalBcoinGasto(heroio?.totalBcoinGasto)
        setQuantidadePorRaridade({ ...heroio?.quantidadePorRaridade })

        setHouse({tokenID: String(objCasa?.tokenID), tokenName: String(objCasa?.tokenName), value: String(objCasa?.value)})

    }

    return (
        <div className={styles.container} style={{ background: "bisque" }}>
            <Head>
                <title>Bomb Simulator</title>
                <meta name="description" content="Generated by gbs" />
                <link rel="icon" href="/favicon.png" />
                <meta name="google-site-verification" content="NqBBqIJtIXKSgjcfx8OzxII05QkRoCHhN3rT5WgMbUU" />
            </Head>

            <main className={styles.main}>

                <h1 className={styles.title}>
                    simulator
                </h1>

                <div className={gbs.container}>
                    <div>
                        <label>Address: </label>

                    </div>
                    <div>
                        <input type="text" name="carteira" id="carteira" className={gbs.text} placeholder="ex: 0x12345abcdef..."
                            onChange={(e) => { setCarteira(e.target.value) }}
                        />
                    </div>
                    <div>
                        <button onClick={buscarHero} className={gbs.button}>search</button>
                        {/* <input type="submit" value="search" className={gbs.button}/> */}
                    </div>
                </div>

                {mostrar ?
                    <div>

                        <div className={styles.grid}>
                            {/* <div className={styles.card}>
                                <Image onClick={buscarHero}
                                src="/hero.png"
                                alt="hero"
                                width={70}
                                height={93}
                                quality={100}/>
                            </div> */}

                            <div className={styles.card} >
                                <div>
                                    House: {house?.value == '0' ? 'no': house?.value}
                                </div>
                                <div>
                                    Invested bombers: {totalBcoinGasto}
                                </div>
                                <div>
                                    bcoin claimed: {claimed}
                                </div>
                                <div>
                                    tax: {taxa}
                                </div>
                                <div>
                                    total withdrawal: {saques}
                                </div>
                                <div>
                                    TOTAL INVESTED: {house?.value == '0' ? totalBcoinGasto: parseFloat(house?.value) + totalBcoinGasto}
                                    
                                </div>
                            </div>

                            <div className={styles.card}>
                                HEROIS: {heroi?.length} 
                                <li>
                                    Max: {max} bcoin day
                                </li>
                                <li>
                                    Avg: {avg} bcoin day
                                </li>
                                <li>
                                    Min: {min} bcoin day
                                </li>
                            </div>

                            <div className={styles.card}>
                                <div>
                                    common: {quantidadePorRaridade.common}
                                </div>
                                <div>
                                    rare: {quantidadePorRaridade.rare}
                                </div>
                                <div>
                                    super rare: {quantidadePorRaridade.superRare}
                                </div>
                                <div>
                                    epic: {quantidadePorRaridade.epic}
                                </div>
                                <div>
                                    legend: {quantidadePorRaridade.legend}
                                </div>
                                <div>
                                    super legend: {quantidadePorRaridade.superLegend}
                                </div>
                            </div>

                        </div>

                        <div className={styles.grid}>
                            {heroi?.map((item: IHeroiOB) =>


                                <div key={item.id} className={gbs.card}>

                                    <div className={gbs.grid}>
                                        <div className={gbs.box1}>
                                            <div>
                                                {item.id}
                                            </div>
                                            <div className={gbs.box} style={{ background: item.rarityCor }}>
                                                <Image src={item.skin} alt={item.skin} width={64} height={64} quality={100} />
                                            </div>
                                            
                                            <div>
                                                level: {item.level}
                                            </div>

                                            <div>
                                                {item.rarity}
                                            </div>
                                        </div>

                                        <div className={gbs.box2}>
                                            <div>
                                                <div className={styles.tela}>
                                                    <Image src="/power.png" alt="power" width={32} height={32} quality={100} /> Power: {item.power}
                                                </div>
                                                <div>
                                                    <Image src="/speed.png" alt="speed" width={32} height={32} quality={100} />  Speed: {item.speed}
                                                </div>
                                                <div>
                                                    <Image src="/stamina.png" alt="stamina" width={32} height={32} quality={100} /> Stamina: {item.stamina}
                                                </div>
                                                <div>
                                                    <Image src="/bomb.png" alt="bomb" width={32} height={32} quality={100} /> Bomb num: {item.bombnum}
                                                </div>
                                                <div>
                                                    <Image src="/range.png" alt="range" width={32} height={32} quality={100} /> Bomb range: {item.bombrange}
                                                </div>

                                            </div>

                                            <hr />
                                                <div className={gbs.skill}>
                                                    {item.abilities.map((item: any) =>
                                                        <Image key={item} src={'/abilities_' + item + '.png'} alt="range" width={32} height={32} quality={100} />
                                                    )}
                                                </div>


                                        </div>

                                        <div className={gbs.box3}>
                                            <div>bcoin profit</div>
                                            <div>Max: {item.maxProfit}</div>
                                            <div>Avg: {item.avgProfit}</div>
                                            <div>Min: {item.minProfit}</div>
                                            {/* <div>Total profit: {item.totalProfit}</div> */}
                                        </div>

                                    </div>


                                </div>
                            )}
                        </div>

                    </div> : <div>...welcome...</div>

                }
            </main>
        </div>

    )
}


const calcular = async (carteira: string) => {
    var max = 0
    var avg = 0
    var min = 0
    var total = 0

    if (!carteira) {
        return console.log("Ai, preencha o campo carteira")
    }
    if (carteira.length != 42) {
        return console.log("ops...wallet address... :(")
    }

    var dados: Array<IHeroi> = await consultaApiHerois(carteira)
    //console.log(dados)

    var totalSaque: any = await totalSacado(carteira)
    const saques: number = totalSaque.data.total

    //console.log(totalSaque);
    //calulcando os bcoin e taxas
    var bcoin = 0
    var bcoin_claimed = 0
    var taxa = 0
    var claimed = 0

    if (totalSaque.data.items) {
        console.log(";)")

        for (const item of totalSaque.data.items) {
            bcoin += item.amount_of_bcoin
            bcoin_claimed += item.amount_of_bcoin_claimed
        }
    
        taxa = bcoin - bcoin_claimed
        claimed = bcoin_claimed

    } 

    const final = dados?.map((item: IHeroi) => {
        return updateSimulator(item)
    })

    const quantidadePorRaridade = quantidadeRaridade(dados)

    //classificacaoBomber(dados)

    const totalBcoinGasto = calcularBcoin(dados)


    for (const item of final) {
        max = max + item.maxProfit
        avg = avg + item.avgProfit
        min = min + item.minProfit
        total = total + item.totalProfit
    }

    const calculado = {
        max: parseFloat(max.toFixed(2)),
        avg: parseFloat(avg.toFixed(2)),
        min: parseFloat(min.toFixed(2)),
        total: parseFloat(total.toFixed(2)),
        final: final,
        taxa: parseFloat(taxa.toFixed(2)),
        claimed: parseFloat(claimed.toFixed(2)),
        saques: parseFloat(saques.toFixed(2)),
        quantidadePorRaridade,
        totalBcoinGasto
    }

    return calculado

}

export default Bomb
